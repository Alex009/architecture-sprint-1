services:

  mongo:
    image: mongo
    restart: unless-stopped
    logging:
      driver: none
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  backend-test:
    build:
      context: backend
      dockerfile: ../Dockerfile.backend
    environment:
      DB_ADDRESS: mongodb://mongo:27017/mestodb
    command: npm run lint
    restart: 'no'
    depends_on:
      mongo:
        condition: service_healthy

  backend:
    build:
      context: backend
      dockerfile: ../Dockerfile.backend
    environment:
      DB_ADDRESS: mongodb://mongo:27017/mestodb
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - 4000:3000
    healthcheck:
      interval: 10s
      timeout: 2s 
      start_period: 15s 
      retries: 5 
      test: node healthcheck.js

  frontend-test:
    build:
      context: frontend
      dockerfile: ../Dockerfile.frontend.test
    command: yarn test:microfrontend
    restart: 'no'
    environment:
      CI: true
    # так как теперь у нас микрофронтенды, то нужно чтобы тесты могли загрузить все части фронта.
    network_mode: host
    depends_on:
      microfrontend-auth:
        condition: service_started
      microfrontend-users:
        condition: service_started
      microfrontend-cards:
        condition: service_started

  frontend:
    build:
      context: frontend
      dockerfile: ../Dockerfile.frontend
    ports:
      - 3000:80
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      microfrontend-auth:
        condition: service_started
      microfrontend-users:
        condition: service_started
      microfrontend-cards:
        condition: service_started

  microfrontend-auth:
    build:
      context: frontend/auth-microfrontend
      dockerfile: ../../Dockerfile.frontend
    ports:
      - 3001:80
    depends_on:
      backend:
        condition: service_healthy

  microfrontend-users:
    build:
      context: frontend/users-microfrontend
      dockerfile: ../../Dockerfile.frontend
    ports:
      - 3002:80
    depends_on:
      backend:
        condition: service_healthy

  microfrontend-cards:
    build:
      context: frontend/cards-microfrontend
      dockerfile: ../../Dockerfile.frontend
    ports:
      - 3003:80
    depends_on:
      microfrontend-users:
        condition: service_started
      backend:
        condition: service_healthy